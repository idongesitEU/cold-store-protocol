"use strict";const{WORD_LIST:WORD_LIST,validateInput:validateInput,isString:isString,isInteger:isInteger,readTextFile:readTextFile,sha256:sha256,sha256NTimes:sha256NTimes,sha256Base64NTimes:sha256Base64NTimes,pseudoRandomChecksumWord:pseudoRandomChecksumWord,pseudoRandomNumber:pseudoRandomNumber,getFirstN:getFirstN,getLastN:getLastN,base64ToHex:base64ToHex,hexToBinary:hexToBinary,stringToNJoinArray:stringToNJoinArray,binaryArrayToBase10Array:binaryArrayToBase10Array,ASCIICharsFromNumberArray:ASCIICharsFromNumberArray,pseudoRandomInteger:pseudoRandomInteger}=require("./factory-min"),NUMBER_OF_HASHES=10**7,PASSWORD_BLOCK_SIZE=16;function callSiteBuilder(e,s){return buildPassword(process.env.base,process.env.extendedBase,s,e,16)}function buildPassword(e,s,a,r,t=16,o){const i=getBaseKey(e,s);if(runChecks(e,s,a,r,t,NUMBER_OF_HASHES)){return getASCIIPassword(getCombinedPasswordHash(`${i} ${pseudoRandomInteger(addWordToPhrase(i,r))}`,t),t)}throw"checks failed, ensure you called with the right paramaters"}function getCombinedPasswordHash(e,s){if(e&&s){if(s%PASSWORD_BLOCK_SIZE!=0)throw"password length must be divisible by "+PASSWORD_BLOCK_SIZE;if(s>64)throw"max password length is 64";const a={hexHashes:[],base64Hashes:[]},r=s/PASSWORD_BLOCK_SIZE;for(let s=0;s<r;s++)if(0===a.hexHashes.length&&0===a.base64Hashes.length)a.hexHashes.push(sha256NTimes(e,NUMBER_OF_HASHES)),a.base64Hashes.push(sha256Base64NTimes(e,NUMBER_OF_HASHES));else{const e=s-1,r=a.hexHashes[e],t=a.base64Hashes[e];a.hexHashes.push(sha256NTimes(r,NUMBER_OF_HASHES)),a.base64Hashes.push(sha256Base64NTimes(t,NUMBER_OF_HASHES))}return`${a.hexHashes.join("")}${a.base64Hashes.map((e=>base64ToHex(e))).join("")}`}throw"missing arguement"}function getBaseKey(e,s){isString(e);let a=addWordToPhrase(e,pseudoRandomChecksumWord(e));return s&&(a=addWordToPhrase(a,s)),a}function addWordToPhrase(e,s){return`${e} ${s}`}function runChecks(e,s,a,r,t){if(e&&s&&a&&r&&t){if(NUMBER_OF_HASHES!==10**7&&console.log("WARNING!! NUMBER OF HASHES IS NOT 10,000,000\nnumber of hashes is currently "+NUMBER_OF_HASHES),e.match(/\s+$/gm))throw"base cannot contain a whitespace at the end";if(isString(a),isString(r),""===r)throw"site name cannot be empty";if(r.toLowerCase()!=r)throw"site name must be in lower case";if(t%PASSWORD_BLOCK_SIZE!=0)throw"password length must be divisible by "+PASSWORD_BLOCK_SIZE;const o=getBaseKey(e,s);return validateInput(o,a),!0}throw"incomplete arguements"}function getASCIIPassword(e,s){if(e&&s){if(s%PASSWORD_BLOCK_SIZE!=0)throw"Password length must be divisible by "+PASSWORD_BLOCK_SIZE;const a=hexToBinary(e),r=a.length/s,t=stringToNJoinArray(a,r),o=binaryArrayToBase10Array(t);return ASCIICharsFromNumberArray(o)}throw"missing arguements"}module.exports={WORD_LIST:WORD_LIST,buildPassword:buildPassword,getBaseKey:getBaseKey,callSiteBuilder:callSiteBuilder};
//# sourceMappingURL=factory.map